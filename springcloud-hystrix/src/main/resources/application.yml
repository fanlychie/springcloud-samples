server:
  port: 9999

spring:
  application:
    name: FEIGN-HYSTRIX-CONSUMER-SERVICE

# 全局配置方式
# 若项目中同时引入Eureka和Ribbon依赖, 会触发Eureka中实现的Ribbon自动化配置, 导致项目配置被覆盖无效, 因此需要禁用Eureka
ribbon:
  eureka:
    enabled: false

# Ribbon 负载均衡配置
# 全局配置: <nameSpace>.<property>=<value>
# 特定服务配置: <client>.<nameSpace>.<property>=<value>
# <client>: 服务ID (自定义, 届时可通过此服务ID经Ribbon负载访问listOfServers列表中的服务, 如 http://client/your_method)
# <nameSpace>: 命名空间, 默认是 ribbon
# <property>: 参见 com.netflix.client.config.CommonClientConfigKey
CLIENT-PROVIDER-CLUSTER:
  ribbon:
    # 禁用Eureka后, 不能直接通过服务ID去调用服务, 而必须要指定服务地址列表, 服务地址列表指定后方可通过服务ID去调用服务
    listOfServers: localhost:9901,localhost:9902
    # 请求连接的超时时间
    ConnectTimeout: 3000
    # 请求处理的超时时间
    ReadTimeout: 5000
    # PING策略: 用于检查服务的可用性
    # PingUrl: PING提供者的'/'根路径, 以确认服务提供者是否正常, 服务提供者需要支持'/'访问
    # NoOpPing: 不PING服务提供者, 永远返回true
    # PingConstant: 不PING服务提供者, 固定返回设定的值, 默认返回true
    # DummyPing: 不PING服务提供者, 永远返回true
    # NIWSDiscoveryPing: 根据负载提供的信息判定, 如果服务是UP状态, 则返回true
    NFLoadBalancerPingClassName: com.netflix.loadbalancer.PingUrl
    # 客户端负载均衡策略
    # RandomRule: 随机, 对服务列表中的服务进行随机选择访问
    # RoundRobinRule: 轮询, 对服务列表中的服务进行轮询访问
    # WeightedResponseTimeRule: 权重, 对服务列表中的服务根据其平均响应时间计算每个服务的权重, 响应快的服务权重高, 被选中的概率越大
    # AvailabilityFilteringRule: 过滤掉服务列表中故障和并发请求数量超过阀值的服务, 然后采用轮询策略对剩余的服务列表进行服务访问
    # RetryRule: 对服务列表中的服务采用轮询的方式进行访问, 如果失败则进行重试
    # BestAvailableRule: 剔除服务列表中故障的服务, 然后选择最空闲(并发访问数量最小)的服务进行访问
    # ZoneAvoidanceRule: 默认策略, 通过判断服务所在的区域和性能来选择一个服务访问
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
    # 重试机制, 需要引入spring-retry依赖才起效
    # 对选择的当前实例请求失败重试的次数, 如果重试次数超出设定的这个阀值, 则触发切换请求另外一个实例
    MaxAutoRetries: 1
    # 失败切换实例的次数, 如果切换实例的次数超出设定的这个阀值, 则返回调用失败
    MaxAutoRetriesNextServer: 1

# Feign 声明式客户端配置
# feign.client.config.feignName.<property>=<value>
# feignName: 全局配置的名称为 default
# <property>: 参考 org.springframework.cloud.openfeign.FeignClientProperties.FeignClientConfiguration
feign:
  client:
    config:
      default:
        # Feign 日志级别:
        # NONE: 不记录日志
        # BASIC: 只记录一些基础的请求信息, 如请求方法,地址,响应码,执行时间
        # HEADERS: 只记录一些基础的请求信息, 如响应头信息
        # FULL: 记录完整的请求信息
        loggerLevel: FULL
  httpclient:
    # 启用 HttpClient
    enabled: true
    # 最大连接数, 超出这个阀值的请求会排队等候
    max-connections: 200
    # 每个路由的最大连接数(支持并发的最大数)
    max-connections-per-route: 50
    # 连接存活时间/秒
    time-to-live: 900
  # 启用熔断机制
  hystrix:
    enabled: true

# Hystrix 配置
hystrix:
  # Hystrix Command 配置
  # hystrix.command.default.*: 全局配置, 属性配置参考 com.netflix.hystrix.HystrixCommandProperties
  # hystrix.command.[commandKey].* ：特定服务配置, commandKey是服务ID或@HystrixCommand的commandKey
  command:
    default:
      # 线程隔离配置
      execution:
        isolation:
          thread:
            # 执行超时时间, 如果超时则进入服务降级方法处理, 默认是1000毫秒
            timeoutInMilliseconds: 5000
        timeout:
          # 是否启用执行超时, 默认开启
          enabled: true
      # 滚动窗口配置
      # 滚动窗口是hystrix用于收集服务健康指标的信息
      metrics:
        rollingStats:
          # 滚动窗口的长度, 它是hystrix收集服务健康指标信息时所持续的时间, 默认是10000毫秒
          timeInMilliseconds: 10000
          # 滚动窗口的桶数量, 桶是hystrix统计滚动窗口数据的最小单位, 默认是10个
          # hystrix会根据配置的窗口长度均匀分配给每个桶, 每个桶收集服务健康指标信息所持续的时长为 timeInMilliseconds/numBuckets
          # 默认情况下(滚动窗口长度是10秒, 桶的数量是10个), 每个滚动窗口收集统计的是1秒内的请求数据
          numBuckets: 10
      # 熔断器配置
      circuitBreaker:
        # 是否启用熔断器
        enabled: true
        # 在滚动窗口中，断路器熔断的最小请求数, 默认20
        requestVolumeThreshold: 20
        # 请求失败的百分比数达到多少时启动断路器熔断, 默认是50
        # 默认情况下(滚动窗口长度是10秒), 10秒内收到的请求数量，其失败的比例超过50%, 且失败的数量超过requestVolumeThreshold设定的阀值, 断路器就会打开
        # 如服务10秒内收到3个请求, 且这3个请求全部失败, 其失败率为100%>50%, 但是断路器不会打开, 因为3<requestVolumeThreshold设定的阀值(默认20)
        errorThresholdPercentage: 50
        # 当断路器的熔断状态打开后, 窗口休眠的时间, 默认是5000毫秒
        # 休眠时间过后, hystrix将形态切换到半开状态, 然后放行一个请求, 如果该请求处理成功, 则将熔断器的状态切换回关闭状态, 否则切换到打开状态
        # 断路器状态打开后, 所有的请求都会快速失败, 执行fallback的逻辑
        sleepWindowInMilliseconds: 5000
  # Hystrix ThreadPool 配置
  # hystrix.threadpool.default.*: 全局配置, 属性配置参考 com.netflix.hystrix.HystrixThreadPoolProperties
  # hystrix.threadpool.[commandKey].* ：特定服务配置, commandKey是服务ID或@HystrixCommand的commandKey
  threadpool:
    default:
      # 核心线程数, 即最大支持的并发数量, 默认10
      coreSize: 10
      # 是否允许线程池大小自动扩展到maximumSize设定的最大线程数量, 默认false
      allowMaximumSizeToDivergeFromCoreSize: true
      # 线程池最大的大小, 如果allowMaximumSizeToDivergeFromCoreSize为false, 则此项配置无效
      maximumSize: 15
      # 当线程池大小自动扩展到超出coreSize设定的阀值时, 在线程池空闲的时候, 超出coreSize大小的线程将被回收
      # 在这些线程被回收前, 线程最大存活的时间, 默认1分钟
      keepAliveTimeMinutes: 1
      # 线程池等待获取线程的最大队列大小, 默认-1, 表示不限制
      # 当线程池中无可用线程时, 新来的请求会进入此队列中排队等待获取线程, 若请求数量超出队列大小时, 其余请求将被拒绝掉
      maxQueueSize: 8
      # 当队列大小超出这个阀值时, 即使队列未满, 其余的请求也将被拒绝掉, 默认5
      queueSizeRejectionThreshold: 5